generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String
  //
  passwordRecoveryToken PasswordRecoveryToken?
  profile               Profile?
  //
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")

  @@map("users")
}

model PasswordRecoveryToken {
  id        String   @id @default(uuid())
  token     String   @unique @default(uuid())
  //
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  //
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_recovery_tokens")
}

model Profile {
  id          String       @id @default(uuid())
  name        String
  bio         String
  avatar      String?
  phoneNumber String       @unique @map("phone_number")
  //
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String       @unique @map("user_id")
  connections Connection[]
  classes     Class[]
  //
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("profiles")
}

model Class {
  id            String          @id @default(uuid())
  subject       String
  cost          Float
  //
  profile       Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId     String          @map("profile_id")
  classSchedule ClassSchedule[]
  //
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  @@map("classes")
}

model ClassSchedule {
  id        String   @id @default(uuid())
  weekDay   Int      @map("week_day")
  from      Int
  to        Int
  //
  class     Class    @relation(fields: [classId], references: [id])
  classId   String   @map("class_id")
  //
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("classes_schedules")
}

model Connection {
  id        String   @id @default(uuid())
  //
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @map("profile_id")
  //
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("connections")
}
